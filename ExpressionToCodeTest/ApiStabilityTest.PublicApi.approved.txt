enum EqualityExpressionClass
    int value__
    const EqualityExpressionClass None = 0
    const EqualityExpressionClass EqualsOp = 1
    const EqualityExpressionClass NotEqualsOp = 2
    const EqualityExpressionClass ObjectEquals = 3
    const EqualityExpressionClass ObjectEqualsStatic = 4
    const EqualityExpressionClass ObjectReferenceEquals = 5
    const EqualityExpressionClass EquatableEquals = 6
    const EqualityExpressionClass SequenceEqual = 7
    const EqualityExpressionClass StructuralEquals = 8

interface IAnnotatedToCode
    string inst.AnnotatedToCode(Expression e, string msg, bool outerValueIsAssertionFailure)

interface ICodeAnnotator
    string inst.AnnotateExpressionTree(ExpressionToCodeConfiguration config, Expression expr, string msg, bool outerValueIsAssertionFailure)

interface IExpressionCompiler
    Func<T> inst.Compile<T>(Expression<Func<T>> expression)
    Delegate inst.Compile(LambdaExpression expression)

interface IExpressionToCode
    string inst.ToCode(Expression e)

interface IObjectStringifier
    string inst.PlainObjectToCode(object val, Type type)
    string inst.TypeNameToCode(Type type)
    bool inst.PreferLiteralSyntax(string str1)

class AnnotatedToCodeExtensions
    string TYPE.AnnotatedToCode(IAnnotatedToCode it, Expression e)
    string TYPE.AnnotatedToCode<T, T1, T2, T3>(IAnnotatedToCode it, Expression<Func<T, T1, T2, T3>> e)
    string TYPE.AnnotatedToCode<T, T1, T2>(IAnnotatedToCode it, Expression<Func<T, T1, T2>> e)
    string TYPE.AnnotatedToCode<T, T1>(IAnnotatedToCode it, Expression<Func<T, T1>> e)
    string TYPE.AnnotatedToCode<T>(IAnnotatedToCode it, Expression<Func<T>> e)
    string TYPE.AnnotatedToCode<T, T1, T2, T3>(IAnnotatedToCode it, Expression<Func<T, T1, T2, T3>> e, string msg, bool outerValueIsAssertionFailure)
    string TYPE.AnnotatedToCode<T, T1, T2>(IAnnotatedToCode it, Expression<Func<T, T1, T2>> e, string msg, bool outerValueIsAssertionFailure)
    string TYPE.AnnotatedToCode<T, T1>(IAnnotatedToCode it, Expression<Func<T, T1>> e, string msg, bool outerValueIsAssertionFailure)
    string TYPE.AnnotatedToCode<T>(IAnnotatedToCode it, Expression<Func<T>> e, string msg, bool outerValueIsAssertionFailure)

class CodeAnnotators
    static readonly ICodeAnnotator ValuesOnStalksCodeAnnotator
    static readonly ICodeAnnotator SubExpressionPerLineCodeAnnotator

class ExpressionExpectations
    void TYPE.Expect(Expression<Func<bool>> assertion, string msg)

class ExpressionToCode
    string TYPE.ToCode<T, T1, T2, T3>(Expression<Func<T, T1, T2, T3>> e)
    string TYPE.ToCode<T, T1, T2>(Expression<Func<T, T1, T2>> e)
    string TYPE.ToCode<T, T1>(Expression<Func<T, T1>> e)
    string TYPE.ToCode<T>(Expression<Func<T>> e)
    string TYPE.ToCode(Expression e)
    string TYPE.AnnotatedToCode<T, T1, T2, T3>(Expression<Func<T, T1, T2, T3>> e)
    string TYPE.AnnotatedToCode<T, T1, T2>(Expression<Func<T, T1, T2>> e)
    string TYPE.AnnotatedToCode<T, T1>(Expression<Func<T, T1>> e)
    string TYPE.AnnotatedToCode<T>(Expression<Func<T>> e)
    string TYPE.AnnotatedToCode(Expression expr)
    string TYPE.ToCode<T, T1, T2, T3>(ExpressionToCodeConfiguration config, Expression<Func<T, T1, T2, T3>> e)
    string TYPE.ToCode<T, T1, T2>(ExpressionToCodeConfiguration config, Expression<Func<T, T1, T2>> e)
    string TYPE.ToCode<T, T1>(ExpressionToCodeConfiguration config, Expression<Func<T, T1>> e)
    string TYPE.ToCode<T>(ExpressionToCodeConfiguration config, Expression<Func<T>> e)
    string TYPE.ToCode(ExpressionToCodeConfiguration config, Expression e)
    string TYPE.AnnotatedToCode<T, T1, T2, T3>(ExpressionToCodeConfiguration config, Expression<Func<T, T1, T2, T3>> e)
    string TYPE.AnnotatedToCode<T, T1, T2>(ExpressionToCodeConfiguration config, Expression<Func<T, T1, T2>> e)
    string TYPE.AnnotatedToCode<T, T1>(ExpressionToCodeConfiguration config, Expression<Func<T, T1>> e)
    string TYPE.AnnotatedToCode<T>(ExpressionToCodeConfiguration config, Expression<Func<T>> e)
    string TYPE.AnnotatedToCode(ExpressionToCodeConfiguration config, Expression expr)
    string TYPE.ToValuedCode<TResult>(Expression<Func<TResult>> expression)
    string TYPE.GetNameIn<TResult>(Expression<Func<TResult>> expression)
    string TYPE.GetNameIn(Expression<Action> expression)
    string TYPE.GetNameIn(Expression expr)

class ExpressionToCodeConfiguration
    static readonly ExpressionToCodeConfiguration DefaultCodeGenConfiguration
    static readonly ExpressionToCodeConfiguration DefaultAssertionConfiguration
    static ExpressionToCodeConfiguration GlobalAssertionConfiguration
    static ExpressionToCodeConfiguration GlobalCodeGenConfiguration
    ExpressionToCodeConfiguration inst.WithCompiler(IExpressionCompiler compiler)
    ExpressionToCodeConfiguration inst.WithAnnotator(ICodeAnnotator annotator)
    ExpressionToCodeConfiguration inst.WithPrintedListLengthLimit(int? limitListsToLength)
    ExpressionToCodeConfiguration inst.WithMaximumValueLength(int? limitValueStringsToLength)
    ExpressionToCodeConfiguration inst.WithOmitImplicitCasts(bool omitImplicitCasts)
    ExpressionToCodeConfiguration inst.WithObjectStringifier(IObjectStringifier objectStringifier)
    ExpressionToCodeConfiguration inst.WithAlwaysUseExplicitTypeArguments(bool alwaysUseExplicitTypeArguments)
    IExpressionToCode inst.GetExpressionToCode()
    IAnnotatedToCode inst.GetAnnotatedToCode()

class ExpressionToCodeExtensions
    string TYPE.ToCode<T, T1, T2, T3>(IExpressionToCode it, Expression<Func<T, T1, T2, T3>> e)
    string TYPE.ToCode<T, T1, T2>(IExpressionToCode it, Expression<Func<T, T1, T2>> e)
    string TYPE.ToCode<T, T1>(IExpressionToCode it, Expression<Func<T, T1>> e)
    string TYPE.ToCode<T>(IExpressionToCode it, Expression<Func<T>> e)

class ExpressionTreeAssertion
    void TYPE.Assert(ExpressionToCodeConfiguration config, Expression<Func<bool>> assertion, string msg)

class ExpressionTreeCompilers
    static readonly IExpressionCompiler DotnetExpressionCompiler
    static readonly IExpressionCompiler FastExpressionCompiler

class FormatStringParser
    (FormatStringParser.Segment[], string) TYPE.ParseFormatString(FormattableString formattableString)
    (FormatStringParser.Segment[], string) TYPE.ParseFormatString(string formatString, object[] formatArguments)

struct FormatStringParser.Segment : ValueType
    string InitialStringPart
    object FollowedByValue
    string WithFormatString

class EqualityExpressions
    EqualityExpressionClass TYPE.CheckForEquality(Expression<Func<bool>> e)
    IEnumerable<Tuple<EqualityExpressionClass, bool>> TYPE.DisagreeingEqualities(ExpressionToCodeConfiguration config, Expression<Func<bool>> e)

class ObjectStringifierExtensions
    string TYPE.PlainObjectToCode(IObjectStringifier it, object val)

class ObjectStringify
    static readonly IObjectStringifier Default
    static readonly IObjectStringifier WithFullTypeNames
    static readonly IObjectStringifier WithoutLiteralStrings
    static readonly IObjectStringifier WithFullTypeNamesWithoutLiteralStrings

class ObjectToCode
    string TYPE.ComplexObjectToPseudoCode(object val)
    string TYPE.ComplexObjectToPseudoCode(ExpressionToCodeConfiguration config, object val)
    string TYPE.PlainObjectToCode(object val)
    string TYPE.PlainObjectToCode(object val, Type type)
    string TYPE.ToCSharpFriendlyTypeName(Type type)

class PAssert
    void TYPE.IsTrue(Expression<Func<bool>> assertion)
    void TYPE.That(Expression<Func<bool>> assertion, string msg)

